{"version":3,"file":"static/js/115.e30248d5.chunk.js","mappings":"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","sources":["components/Loader/Loader.jsx","components/Movies/Movies.jsx","components/api.js","hooks/useMovieParams.js"],"sourcesContent":["import { RotatingLines } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <RotatingLines\n      strokeColor=\"grey\"\n      strokeWidth=\"5\"\n      animationDuration=\"0.75\"\n      width=\"30\"\n      visible={true}\n    />\n  );\n};\n","import { Loader } from 'components/Loader/Loader';\nimport { fetchMovieBySearch } from 'components/api';\nimport { useMovieParams } from 'hooks/useMovieParams';\nimport { useEffect, useState } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\n\nconst Movies = () => {\n  const location = useLocation();\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query' ?? '');\n\n  const { movies, setMovies, loading, setLoading } = useMovieParams();\n  const [movieInput, setMovieInput] = useState('');\n\n  useEffect(() => {\n    if (searchParams === '') {\n      return;\n    }\n\n    async function fetchMovieByInput() {\n      try {\n        setLoading(true);\n        const fetchedMovies = await fetchMovieBySearch(query);\n\n        setMovieInput(query);\n        setMovies(fetchedMovies.results);\n      } catch (error) {\n        console.log('ERROR');\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    fetchMovieByInput();\n  }, [setMovies, setLoading, searchParams, query]);\n\n  const changeInput = evt => {\n    setMovieInput(evt.target.value);\n  };\n\n  return (\n    <div>\n      <hr />\n      <form\n        onSubmit={evt => {\n          evt.preventDefault();\n          searchParams.set('query', movieInput);\n          setSearchParams(searchParams);\n        }}\n      >\n        <input\n          type=\"text\"\n          onChange={changeInput}\n          value={movieInput ? movieInput : ''}\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n      {loading && <Loader />}\n      {movies.length > 0 && query !== null && (\n        <ul>\n          {movies.map(item => {\n            return (\n              <li key={item.id}>\n                <Link to={`/movies/${item.id}`} state={{ from: location }}>\n                  {item.title}\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nconst url = 'https://api.themoviedb.org/3/trending/movie/day?language=en-US';\nconst options = {\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJiZWYwNzZkYzkxYmE1ZGM1YzNhNzg0ZmEyZjhkYjJmOCIsInN1YiI6IjY1MmU1MzcyZWE4NGM3MDBlYmEzNDk3NCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.eb5AtnB5In8Rid9oVZN6shMyC5JnuDma5srOC9ipFqk',\n  },\n};\n\nexport const fetchMovies = async () => {\n  const resp = await axios.get(url, options);\n\n  return resp.data;\n};\n\nexport const fetchMoviesById = async movieId => {\n  const newUrl = `https://api.themoviedb.org/3/movie/${movieId}?language=en-US`;\n  const resp = await axios.get(newUrl, options);\n\n  return resp.data;\n};\n\nexport const fetchMovieCredits = async movieId => {\n  const newUrl = `https://api.themoviedb.org/3/movie/${movieId}/credits?language=en-US`;\n  const resp = await axios.get(newUrl, options);\n\n  return resp.data;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const newUrl = `https://api.themoviedb.org/3/movie/${movieId}/reviews?language=en-US&page=1`;\n  const resp = await axios.get(newUrl, options);\n\n  return resp.data;\n};\n\nexport const fetchMovieBySearch = async searchMovieByInput => {\n  const newUrl = `https://api.themoviedb.org/3/search/movie?query=${searchMovieByInput}&include_adult=false&language=en-US&page=1`;\n  const resp = await axios.get(newUrl, options);\n\n  return resp.data;\n};\n","import { useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nexport const useMovieParams = () => {\n  const params = useParams();\n  const [movies, setMovies] = useState([]);\n  const [movie, setMovie] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [cast, setCast] = useState(null);\n  const [reviews, setReviews] = useState([]);\n\n  return {\n    params,\n    movies,\n    setMovies,\n    movie,\n    setMovie,\n    loading,\n    setLoading,\n    cast,\n    setCast,\n    reviews,\n    setReviews,\n  };\n};\n"],"names":["Loader","strokeColor","strokeWidth","animationDuration","width","visible","location","useLocation","useSearchParams","searchParams","setSearchParams","query","get","useMovieParams","movies","setMovies","loading","setLoading","useState","movieInput","setMovieInput","useEffect","fetchMovieBySearch","fetchedMovies","results","console","log","fetchMovieByInput","onSubmit","evt","preventDefault","set","type","onChange","target","value","length","map","item","to","id","state","from","title","options","headers","accept","Authorization","fetchMovies","axios","resp","data","fetchMoviesById","movieId","newUrl","fetchMovieCredits","fetchMovieReviews","searchMovieByInput","params","useParams","movie","setMovie","cast","setCast","reviews","setReviews"],"sourceRoot":""}